
# -- Compilers --
CC   := clang
CXX  := clang++

# -- Output files --
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))
OUT ?= $(shell basename $(current_dir))$(SUFFIX)

# -- Directories --
SRC ?= .
INCLUDES = -I.
LDFLAGS += -L.

# -- Flags --
CFLAGS 		+= $(INCLUDES)
CFLAGS      += -std=gnu99 -fPIC
LDFLAGS     += -fPIC

# -- Security Flags --
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	LDFLAGS     +=  -z now -z noexecstack
endif
CFLAGS      +=  -fstack-protector \
				-Wformat \
				-Wformat=2 \
				-Wformat-security \
				-fPIE -fPIC \
				-D_FORTIFY_SOURCE=2 \
				-Wall -Wextra \
				-Wpointer-arith \
				-Wmissing-format-attribute \
				-Wunreachable-code \
				-Winline \
				-Wfloat-equal \
				-Werror \
				-Wno-unused-parameter \
				-Wno-missing-braces \
				-Wno-missing-field-initializers \
				-Wno-unused-function \
				-Wno-unused-variable

ifdef DEBUG
	CFLAGS		+= -g -O0 -DDEBUG=1
	LDFLAGS		+= -g -O0 -DDEBUG=1
	STRIP       = true
else ifndef NOSTRIP
	STRIP		+= strip
else

endif

ifdef ASAN
	CFLAGS      += -fsanitize=address
	LDFLAGS     += -fsanitize=address
endif

ifdef STATIC
	LDFLAGS      += -static
endif

# -- Input Files --
C_FILES   = $(wildcard $(SRC)/*.c)
CPP_FILES = $(wildcard $(SRC)/*.cpp) $(wildcard $(SRC)/*.cc)
OBJ_FILES = $(patsubst %.c, %.o, $(C_FILES)) $(patsubst %.cpp, %.o, $(CPP_FILES)) $(patsubst %.cc, %.o, $(CPP_FILES))

# -- Dependencies --
DEPFILE = .depfile

all:: $(OUT)
test:: all
	bats *.bats

ifeq ("$(CPP_FILES)","")
LINK:=$(CXX)
else
LINK:=$(CC)
endif

# Output file
# =========================================================
$(OUT): $(OBJ_FILES)
	@echo Building binary $@ from [ $^ ]
	$(LINK) $^ -o $@ $(LDFLAGS)

# Compile source files
# These rules are rewritten into the dependencies file
# =========================================================
.c.o:
	@echo Compiling $@ from [ $< ]
	$(CC) $(CFLAGS) -c $< -o $@

.cc.o:
	@echo Compiling $@ from [ $< ]
	$(CXX) $(CFLAGS) -c $< -o $@

.cpp.o:
	@echo Compiling $@ from [ $< ]
	$(CXX) $(CFLAGS) -c $< -o $@

# Generate dependencies.
# =========================================================
$(DEPFILE):
	rm -f $(DEPFILE)
	$(CC)  -E -MM $(CFLAGS) $(INCLUDES) $(CPP_FILES) $(C_FILES) -MF $(DEPFILE)

clean::
	rm -f $(OUT) $(SRC)/*.o $(DEPFILE)

# Generated dependency file.  Note the dependencies on
# $(DEPFILE)
# =========================================================
NODEPS:=clean tags svn
ifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))
	-include $(DEPFILE)
endif

.SUFFIXES: .c .cpp
.PHONY: all clean install
